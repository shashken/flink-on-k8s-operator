{{- if .Values.rbac.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: cert-configmap
  namespace: {{ .Values.flinkOperatorNamespace.name }}
  labels:
    app.kubernetes.io/name: flink-operator
    app.kubernetes.io/component: cert-configmap
data:
  cert.sh: |-
    set -euxo pipefail
    service="flink-operator-webhook-service"
    certsOutputDir="/serving-certs"
    namespace={{ .Values.flinkOperatorNamespace.name }}
    csrName="${service}.${namespace}"
    tmpdir="$(mktemp -d)"
    echo "Creating certs in tmpdir ${tmpdir} "
    cat <<EOF >> "${tmpdir}/csr.conf"
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage = serverAuth
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = ${service}
    DNS.2 = ${service}.${namespace}
    DNS.3 = ${service}.${namespace}.svc
    EOF
    openssl req -nodes -new -x509 -keyout ca.key -out ca.crt -subj "/CN=Admission Controller Webhook CA"
    openssl genrsa -out ${tmpdir}/server-key.pem 2048
    openssl req -new -key ${tmpdir}/server-key.pem \
      -subj "/CN=${service}.${namespace}.svc" \
      -config ${tmpdir}/csr.conf \
      | openssl x509 -extfile ${tmpdir}/csr.conf \
        -extensions v3_req \
        -days 3650 -req -CA ca.crt -CAkey ca.key -CAcreateserial \
        -out ${tmpdir}/server-cert.pem
    serverCert="$(openssl base64 -A -in ${tmpdir}/server-cert.pem)"
    if [[ -z ${serverCert} ]]; then
        echo "ERROR: The signed certificate did not appear." >&2
        exit 1
    fi
    export CA_PEM_B64="$(echo ${serverCert})"
    # create the secret with CA cert and server cert/key
    cp ${tmpdir}/server-key.pem ${certsOutputDir}/tls.key
    cp ${tmpdir}/server-cert.pem ${certsOutputDir}/tls.crt
    ls ${certsOutputDir}
    for webhook in /webhook_to_create/*;
    do
      echo $(cat $webhook | envsubst '${CA_PEM_B64}');
      cat $webhook | envsubst '${CA_PEM_B64}' | kubectl apply -f -
    done
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: webhook-configmap
  namespace: {{ .Values.flinkOperatorNamespace.name }}
  labels:
    app.kubernetes.io/name: flink-operator
    app.kubernetes.io/component: webhook-configmap
data:
  webook.yaml: |-
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: MutatingWebhookConfiguration
    metadata:
      creationTimestamp: null
      name: flink-operator-mutating-webhook-configuration
    webhooks:
    - clientConfig:
        caBundle: $CA_PEM_B64
        service:
          name: flink-operator-webhook-service
          namespace: {{ .Values.flinkOperatorNamespace.name }}
          path: /mutate-flinkoperator-k8s-io-v1beta1-flinkcluster
      failurePolicy: Fail
      name: mflinkcluster.flinkoperator.k8s.io
      rules:
      - apiGroups:
        - flinkoperator.k8s.io
        apiVersions:
        - v1beta1
        operations:
        - CREATE
        - UPDATE
        resources:
        - flinkclusters
    ---
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: ValidatingWebhookConfiguration
    metadata:
      creationTimestamp: null
      name: flink-operator-validating-webhook-configuration
    webhooks:
    - clientConfig:
        caBundle: $CA_PEM_B64
        service:
          name: flink-operator-webhook-service
          namespace: {{ .Values.flinkOperatorNamespace.name }}
          path: /validate-flinkoperator-k8s-io-v1beta1-flinkcluster
      failurePolicy: Fail
      name: vflinkcluster.flinkoperator.k8s.io
      rules:
      - apiGroups:
        - flinkoperator.k8s.io
        apiVersions:
        - v1beta1
        operations:
        - CREATE
        - UPDATE
        resources:
        - flinkclusters
{{- end }}
